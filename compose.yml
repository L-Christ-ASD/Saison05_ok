services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - app-network
    
  back:
    image: node:lts-alpine
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./back:/app
    command: sh -c "npm install && node index.js"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: mydb
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 12
    networks:
      - app-network

  front:
    image: nginx:alpine
    depends_on:
      back:
        condition: service_healthy
    volumes:
      - ./front:/usr/share/nginx/html
    networks:
      - app-network

  reverseproxy:
    image: nginx:latest
    ports:
      - 5000:80
    volumes:
      - ./nginx/local.conf:/etc/nginx/nginx.conf
    depends_on:
      back: # Attend que le service backend soit en bonne santé
        condition: service_healthy
      front: # Attend que le service frontend soit démarré
        condition: service_started
    networks:
      - app-network

networks:
  app-network: